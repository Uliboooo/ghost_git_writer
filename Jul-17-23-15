```markdown
# ggw

A CLI tool to generate Git commit messages, README files, and diff summaries using Large Language Models (LLMs).

## Key Features

- **Commit Message Generation:** Automatically generate commit messages in Conventional Commits format from Git diffs.
- **README Generation:** Create professional README.md files from codebase analysis.
- **Diff Summarization:** Summarize Git diffs in plain English.
- **Multiple LLM Provider Support:** Supports Ollama, Anthropic, DeepSeek, Gemini, and OpenAI.
- **Configurable Models:** Specify the LLM model to use via command-line arguments.
- **Customizable Prompts:** Use custom prompts for commit message generation.
- **Git Integration:** Automatically commit changes to Git repository.
- **Merge or Overwrite README:** Options to merge generated README with existing file or overwrite it.

## Technologies Used

- Rust
- [llm-api-rs](https://crates.io/crates/llm-api-rs): A crate for interacting with various LLM providers.
- [ollama-rs](https://crates.io/crates/ollama-rs): A crate for interacting with local Ollama models.
- [git2](https://crates.io/crates/git2): A crate for interacting with Git repositories.
- [clap](https://crates.io/crates/clap): A crate for building command-line interfaces.
- [dialoguer](https://crates.io/crates/dialoguer): A crate for creating interactive prompts.
- [serde](https://crates.io/crates/serde): A crate for serialization and deserialization.
- [chrono](https://crates.io/crates/chrono): A crate for date and time handling.
- [tokio](https://crates.io/crates/tokio): An asynchronous runtime for Rust.

## Installation

1.  **Install Rust:** Make sure you have Rust installed. You can download it from [https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install).

2.  **Clone the repository:**

    ```bash
    git clone <repository_url>
    cd <repository_directory>
    ```

3.  **Build the project:**

    ```bash
    cargo build --release
    ```

4.  **Add to PATH (Optional):** Add the `target/release` directory to your system's PATH to run the `ggw` command from anywhere.

## How to Run the Project

```bash
ggw --help
```

This will display the available commands and options.

### Setting API Keys

You'll need to set the API keys for the LLM providers you want to use as environment variables:

-   `GGW_ANTHROPIC_API`: Anthropic API key
-   `GGW_GEMINI_API`: Gemini API key
-   `GGW_OPENAI_API`: OpenAI API key
-   `GGW_DEEPSEEK_API`: DeepSeek API key

For Ollama, no API key is required as it runs locally.

### Examples

1.  **Generate a commit message:**

    ```bash
    ggw cmt -m gemini/gemini-2.0-flash
    ```

    This command will:

    *   Read the Git diff in the current directory.
    *   Use the Gemini model to generate a commit message.
    *   Prompt you to edit the message.
    *   Prompt you to commit the changes.

    You can also automatically commit the changes with the `-c` flag:

    ```bash
    ggw cmt -m gemini/gemini-2.0-flash -c
    ```

2.  **Generate a README file:**

    ```bash
    ggw rdm -d . -m gemini/gemini-2.0-flash --allow-merge
    ```

    This command will:

    *   Read all files in the current directory.
    *   Use the Gemini model to generate a README file.
    *   Search for an existing README.md in the directory.
    *   If found, prompt you to merge the generated content. If not found, create a new file.

    You can specify source files with `-s`:

    ```bash
    ggw rdm -s src/main.rs -s src/llm.rs -m gemini/gemini-2.0-flash
    ```

    This command will generate a README based on the contents of `src/main.rs` and `src/llm.rs`.

3.  **Summarize a diff:**

    ```bash
    ggw sum -m gemini/gemini-2.0-flash
    ```

    This command will:

    *   Read the Git diff in the current directory.
    *   Use the Gemini model to summarize the changes.
    *   Print the summary to the console.

## Usage

```
ggw [OPTIONS] <COMMAND>

OPTIONS:
    -y, --yes                # Skip prompts and automatically confirm actions
    -m, --model <MODEL>      # Specify the LLM model to use (e.g., gemini/gemini-2.0-flash)
    -t, --template <TEMPLATE> # Use a registered model from config
    -p, --path <PATH>        # Specify the project path

COMMAND:
    cmt  # Generate commit message and git commit
    rdm  # Create a readme
    sum  # Output diff summary
```

## License

No license information was provided in the codebase. Please add a license file (e.g., `LICENSE`) to the repository and update this section accordingly. For example:

```
Licensed under the MIT License. See the [LICENSE](LICENSE) file for details.
```

## Badges

[![made-with-Rust](https://img.shields.io/badge/Made%20with-Rust-1f425f.svg)](https://www.rust-lang.org/)
```
